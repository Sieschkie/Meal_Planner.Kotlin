type: edu
files:
  - name: src/mealplanner/Main.kt
    visible: true
    text: |-
      package mealplanner
      
      data class Meal(val category: String, val name: String, val ingredients: Array<String>)
      
      fun add():Meal {
          var category: String
          var name: String
          var ingredientsInput =""
          println("Which meal do you want to add (breakfast, lunch, dinner)?")
          category = readLine()?.toLowerCase() ?: ""
          if (category !in listOf("breakfast", "lunch", "dinner")) {
              println("Wrong meal category! Choose from: breakfast, lunch, dinner.")
              return add() //If users fail to input a valid command, print the following message again: What would you like to do (add, show, exit)?
          }
          println("Input the meal's name:")
          name = readLine() ?: ""
          val nameRegex = Regex("""^[a-zA-Z]+$""")
          while (!nameRegex.matches(name)) { //4.Make sure that the input and output formats are correct;
              println("Wrong format. Use letters only!")
              name = readLine() ?: ""
          }
          println("Input the ingredients:")
          val ingredientsRegex = Regex("""^[a-zA-Z\s]+$""")
          var check_input = 0
          do{
              check_input = 0
              ingredientsInput = readln()
              val ingredients = ingredientsInput.split(",").map(String::trim).toTypedArray()
              for (i in ingredients) {
                  if (i.isNotBlank() && i.isNotEmpty() && ingredientsRegex.matches(i) ) { //4.Make sure that the input and output formats are correct;
                      check_input += 1
                  } else {
                      println("Wrong format. Use letters only!")
                  }
              }
              if (check_input == ingredients.size) {
                  println("The meal has been added!") //5. Output The meal has been added! before proceeding;
              }
          }while (!ingredientsRegex.matches(ingredientsInput) && check_input < ingredients.size)
      
          val ingredients = ingredientsInput.split(",").map(String::trim).toTypedArray()
          return Meal(category, name, ingredients)
      }
      
      fun show(meals: MutableList<Meal>){ //Show prints the list of saved meals with their names, categories, and ingredients;
          for (meal in meals){
              println("Category: ${meal.category}\n" +
                      "Name: ${meal.name}\n" +
                      "Ingredients:")
              for (ingredient in meal.ingredients){
                  println(ingredient)
              }
          }
      
      }
      fun main() {
          val meals = mutableListOf<Meal>()
          fun ask(){
              do {
                  println("What would you like to do (add, show, exit)?") //2.Prompt users to choose an operation with the message What would you like to do (add, show, exit)?
                  var operation = readln().toString().toLowerCase()
                  when (operation ){
                      "add" -> {
                          val meal = add()
                          meals.add(meal)
                      }
                      "show" -> {
                          if (meals.isEmpty()) { //6.If users want to show the meals when no meals have been added, print No meals saved. Add a meal first.
                              println("No meals saved. Add a meal first.")
                          } else {
                              show(meals)
                          }
                      }
                      "exit" -> {
                          println("Bye!") //Print Bye! and end the program once the exit command is entered;
                          return
                      }
                  }
              } while(operation  != "exit") //1.Create an infinite loop of your program that can be terminated with the exit command only;
      
          }
          ask() //3.After the command has been processed, ask for another operation;
      }
    learner_created: false
  - name: test/MealPlannerTest.kt
    visible: false
    text: |+
      import org.hyperskill.hstest.dynamic.DynamicTest
      import org.hyperskill.hstest.stage.StageTest
      import org.hyperskill.hstest.testcase.CheckResult
      import org.hyperskill.hstest.testing.TestedProgram
      import java.io.File
      import java.sql.DatabaseMetaData
      import java.sql.DriverManager
      
      class MealPlannerTest : StageTest<Any>() {
      
          @DynamicTest(order = 1)
          fun normalExe6Test(): CheckResult {
              try {
                  val dbFile = File("meals.db")
                  if (dbFile.exists()) dbFile.delete()
              } catch (e: Exception) {
                  return CheckResult(false, "An exception was thrown, while trying to delete a database file.")
              }
      
              val co = CheckOutput()
              if (!co.start("What would you like to do (add, show, exit)?") )
                  return CheckResult(false, "Your program should ask the user about the required action: \"(add, show, exit)?\"")
      
              val dbUrl = "jdbc:sqlite:meals.db"
              val tables = listOf( dbTable("ingredients", listOf(Pair("ingredient", "text"), Pair("ingredient_id", "integer"), Pair("meal_id", "integer"))),
                  dbTable("meals", listOf(Pair("category", "text"), Pair("meal", "text"), Pair("meal_id", "integer"))) )
      
              val (res, errorStr) = checkTableSchema(dbUrl, tables)
              if (!res) return CheckResult(false, errorStr)
      
              if (!co.input("exit", "Bye!"))
                  return CheckResult(false, "Your output should contain \"Bye!\"")
      
              if (!co.programIsFinished() )
                  return CheckResult(false, "The application didn't exit.")
      
              return CheckResult.correct()
          }
      
          @DynamicTest(order = 2)
          fun normalExe7Test(): CheckResult {
              try {
                  val dbFile = File("meals.db")
                  if (dbFile.exists()) dbFile.delete()
              } catch (e: Exception) {
                  return CheckResult(false, "An exception was thrown, while trying to delete a database file.")
              }
      
              try {
                  val co = CheckOutput()
                  if (!co.start("What would you like to do (add, show, exit)?"))
                      return CheckResult(
                          false,
                          "Your program should ask the user about the required action: \"(add, show, exit)?\""
                      )
      
                  if (!co.input("add", "Which meal do you want to add (breakfast, lunch, dinner)?"))
                      return CheckResult(
                          false,
                          "Your program should ask the user about meal category: \"(breakfast, lunch, dinner)?\""
                      )
      
                  if (!co.input("lunch", "Input the meal's name:"))
                      return CheckResult(false, "Your output should contain \"Input the meal's name:\"")
      
                  if (!co.input("sushi", "Input the ingredients:"))
                      return CheckResult(false, "Your output should contain \"Input the ingredients:\"")
      
                  if (!co.input("salmon, rice, avocado", "The meal has been added!"))
                      return CheckResult(false, "Your output should contain \"The meal has been added!\"")
      
                  if (!co.inputNext("What would you like to do (add, show, exit)?"))
                      return CheckResult(
                          false,
                          "Your program should ask the user about the required action: \"(add, show, exit)?\""
                      )
      
                  if (!co.input(
                          "show", "Category: lunch", "Name: sushi", "Ingredients:",
                          "salmon", "rice", "avocado"
                      )
                  )
                      return CheckResult(false, "Wrong \"show\" output for a saved meal.")
      
                  if (!co.input("exit", "Bye!"))
                      return CheckResult(false, "Your output should contain \"Bye!\"")
      
                  if (!co.programIsFinished())
                      return CheckResult(false, "The application didn't exit.")
              } catch (e: Exception) {
                  return CheckResult(false, "An exception was thrown while testing - ${e.message}")
              }
      
              return CheckResult.correct()
          }
      
          @DynamicTest(order = 3)
          fun normalExe8Test(): CheckResult {
              try {
                  val dbFile = File("meals.db")
                  if (!dbFile.exists()) return CheckResult(false, "The meals.db database file doesn't exist.")
              } catch (e: Exception) {
                  return CheckResult(false, "An exception was thrown, while trying to check a database file.")
              }
              try {
                  val co = CheckOutput()
                  if (!co.start("What would you like to do (add, show, exit)?"))
                      return CheckResult(
                          false,
                          "Your program should ask the user about the required action: \"(add, show, exit)?\""
                      )
      
                  if (!co.input(
                          "show", "Category: lunch", "Name: sushi", "Ingredients:",
                          "salmon", "rice", "avocado"
                      )
                  )
                      return CheckResult(false, "Wrong \"show\" output for a saved meal.")
      
                  if (!co.input("exit", "Bye!"))
                      return CheckResult(false, "Your output should contain \"Bye!\"")
      
                  if (!co.programIsFinished())
                      return CheckResult(false, "The application didn't exit.")
              } catch (e: Exception) {
                  return CheckResult(false, "An exception was thrown while testing - ${e.message}")
              }
      
              return CheckResult.correct()
          }
      
          @DynamicTest(order = 4)
          fun normalExeNew01Test(): CheckResult {
              try {
                  val dbFile = File("meals.db")
                  if (dbFile.exists()) dbFile.delete()
              } catch (e: Exception) {
                  return CheckResult(false, "An exception was thrown, while trying to delete a database file.")
              }
      
              try {
                  val co = CheckOutput()
                  if (!co.start("What would you like to do (add, show, exit)?"))
                      return CheckResult(
                          false,
                          "Your program should ask the user about the required action: \"(add, show, exit)?\""
                      )
      
                  if (!co.input("add", "Which meal do you want to add (breakfast, lunch, dinner)?"))
                      return CheckResult(
                          false,
                          "Your program should ask the user about meal category: \"(breakfast, lunch, dinner)?\""
                      )
      
                  if (!co.input("lunch", "Input the meal's name:"))
                      return CheckResult(false, "Your output should contain \"Input the meal's name:\"")
      
                  if (!co.input("sushi", "Input the ingredients:"))
                      return CheckResult(false, "Your output should contain \"Input the ingredients:\"")
      
                  if (!co.input("salmon, rice, avocado", "The meal has been added!"))
                      return CheckResult(false, "Your output should contain \"The meal has been added!\"")
      
                  if (!co.inputNext("What would you like to do (add, show, exit)?"))
                      return CheckResult(
                          false,
                          "Your program should ask the user about the required action: \"(add, show, exit)?\""
                      )
      
                  if (!co.input("add", "Which meal do you want to add (breakfast, lunch, dinner)?"))
                      return CheckResult(
                          false,
                          "Your program should ask the user about meal category: \"(breakfast, lunch, dinner)?\""
                      )
      
                  if (!co.input("breakfast", "Input the meal's name:"))
                      return CheckResult(false, "Your output should contain \"Input the meal's name:\"")
      
                  if (!co.input("english", "Input the ingredients:"))
                      return CheckResult(false, "Your output should contain \"Input the ingredients:\"")
      
                  if (!co.input("sausages, eggs", "The meal has been added!"))
                      return CheckResult(false, "Your output should contain \"The meal has been added!\"")
      
                  if (!co.inputNext("What would you like to do (add, show, exit)?"))
                      return CheckResult(
                          false,
                          "Your program should ask the user about the required action: \"(add, show, exit)?\""
                      )
      
                  if (!co.input("add", "Which meal do you want to add (breakfast, lunch, dinner)?"))
                      return CheckResult(
                          false,
                          "Your program should ask the user about meal category: \"(breakfast, lunch, dinner)?\""
                      )
      
                  if (!co.input("dinner", "Input the meal's name:"))
                      return CheckResult(false, "Your output should contain \"Input the meal's name:\"")
      
                  if (!co.input("meatballs", "Input the ingredients:"))
                      return CheckResult(false, "Your output should contain \"Input the ingredients:\"")
      
                  if (!co.input("meat, bread, salt, pepper, egg", "The meal has been added!"))
                      return CheckResult(false, "Your output should contain \"The meal has been added!\"")
      
                  if (!co.inputNext("What would you like to do (add, show, exit)?"))
                      return CheckResult(
                          false,
                          "Your program should ask the user about the required action: \"(add, show, exit)?\""
                      )
      
                  if (!co.input(
                          "show", "Category: lunch", "Name: sushi", "Ingredients:",
                          "salmon", "rice", "avocado"
                      )
                  )
                      return CheckResult(false, "Wrong \"show\" output for the lunch meal.")
      
                  if (!co.inputNext("Category: breakfast", "Name: english", "Ingredients:",
                          "sausages", "eggs")
                  )
                      return CheckResult(false, "Wrong \"show\" output for the breakfast meal.")
      
                  if (!co.inputNext("Category: dinner", "Name: meatballs", "Ingredients:",
                          "meat", "bread", "salt", "pepper", "egg")
                  )
                      return CheckResult(false, "Wrong \"show\" output for the dinner meal.")
      
                  if (!co.inputNext("What would you like to do (add, show, exit)?"))
                      return CheckResult(
                          false,
                          "Your program should ask the user about the required action: \"(add, show, exit)?\""
                      )
      
                  if (!co.input("exit", "Bye!"))
                      return CheckResult(false, "Your output should contain \"Bye!\"")
      
                  if (!co.programIsFinished())
                      return CheckResult(false, "The application didn't exit.")
              } catch (e: Exception) {
                  return CheckResult(false, "An exception was thrown while testing - ${e.message}")
              }
      
              return CheckResult.correct()
          }
      
          @DynamicTest(order = 5)
          fun normalExeNew02Test(): CheckResult {
              try {
                  val dbFile = File("meals.db")
                  if (!dbFile.exists()) return CheckResult(false, "The meals.db database file doesn't exist.")
              } catch (e: Exception) {
                  return CheckResult(false, "An exception was thrown, while trying to check a database file.")
              }
              try {
                  val co = CheckOutput()
                  if (!co.start("What would you like to do (add, show, exit)?"))
                      return CheckResult(
                          false,
                          "Your program should ask the user about the required action: \"(add, show, exit)?\""
                      )
      
                  if (!co.input(
                          "show", "Category: lunch", "Name: sushi", "Ingredients:",
                          "salmon", "rice", "avocado"
                      )
                  )
                      return CheckResult(false, "Wrong \"show\" output for a saved meal.")
      
                  if (!co.input("exit", "Bye!"))
                      return CheckResult(false, "Your output should contain \"Bye!\"")
      
                  if (!co.programIsFinished())
                      return CheckResult(false, "The application didn't exit.")
              } catch (e: Exception) {
                  return CheckResult(false, "An exception was thrown while testing - ${e.message}")
              }
      
              return CheckResult.correct()
          }
      
      }
      
      class dbTable (val name: String, val columnNameType: List<Pair<String, String>>)
      
      fun checkTableSchema(dbUrl: String, tables: List<dbTable>): Pair<Boolean, String> {
          try {
              val connection = DriverManager.getConnection(dbUrl)
              val meta: DatabaseMetaData = connection.metaData
      
              for (table in tables) {
                  var tableMeta = meta.getTables(null, null, table.name, null)
                  if (!tableMeta.next() || table.name.lowercase() != tableMeta.getString("TABLE_NAME").lowercase())
                      return Pair(false, "The table \"${table.name}\" doesn't exist.")
      
                  var columns = meta.getColumns(null, null, table.name, null)
                  val columnsData = mutableListOf<Pair<String, String>>()
                  while (columns.next()) {
                      val column = Pair(
                          columns.getString("COLUMN_NAME").lowercase(),
                          columns.getString("TYPE_NAME").lowercase()
                      )
                      columnsData.add(column)
                  }
      
                  for (c in table.columnNameType) {
                      if (c !in columnsData) {
                          if (c.first !in columnsData.map { it.first })
                              return Pair(false, "The column \"${c.first}\" of the table \"${table.name}\" doesn't exist.")
                          return Pair(false, "The column \"${c.first}\" of the table \"${table.name}\" is of the wrong type.")
                      }
                  }
              }
      
              connection.close()
          } catch (e: Exception) {
              return Pair(false, "An exception was thrown, while trying to check the database schema - ${e.message}")
          }
      
          return Pair(true, "")
      }
      
      class CheckOutput {
          private var main: TestedProgram = TestedProgram()
          private var position = 0
          private var caseInsensitive = true
          private var trimOutput = true
          private val arguments= mutableListOf<String>()
          private var isStarted = false
          private var lastOutput = ""
      
          private fun checkOutput(outputString: String, vararg checkStr: String): Boolean {
              var searchPosition = position
              for (cStr in checkStr) {
                  val str = if (caseInsensitive) cStr.lowercase() else cStr
                  val findPosition = outputString.indexOf(str, searchPosition)
                  if (findPosition == -1) return false
                  if ( outputString.substring(searchPosition until findPosition).isNotBlank() ) return false
                  searchPosition = findPosition + str.length
              }
              position = searchPosition
              return true
          }
      
          fun start(vararg checkStr: String): Boolean {
              return if (!isStarted) {
                  var outputString = main.start(*arguments.toTypedArray())
                  lastOutput = outputString
                  if (trimOutput) outputString = outputString.trim()
                  if (caseInsensitive) outputString = outputString.lowercase()
                  isStarted = true
                  checkOutput(outputString, *checkStr)
              } else false
          }
      
          fun stop() {
              main.stop()
          }
      
          fun input(input: String, vararg checkStr: String): Boolean {
              if (main.isFinished) return false
              var outputString = main.execute(input)
              lastOutput = outputString
              if (trimOutput) outputString = outputString.trim()
              if (caseInsensitive) outputString = outputString.lowercase()
              position = 0
              return checkOutput(outputString, *checkStr)
          }
      
          fun inputNext(vararg checkStr: String): Boolean {
              var outputString = lastOutput
              if (trimOutput) outputString = outputString.trim()
              if (caseInsensitive) outputString = outputString.lowercase()
              return checkOutput(outputString, *checkStr)
          }
      
          fun getNextOutput(input: String): String {
              if (main.isFinished) return ""
              val outputString = main.execute(input)
              lastOutput = outputString
              position = 0
              return  outputString
          }
      
          fun getLastOutput(): String { return lastOutput }
          fun programIsFinished(): Boolean  = main.isFinished
          fun setArguments(vararg args: String) { arguments.addAll(args.toMutableList()) }
          fun setCaseSensitivity(caseInsensitive: Boolean) { this.caseInsensitive = caseInsensitive }
          fun setOutputTrim(trimOutput: Boolean) { this.trimOutput = trimOutput}
      }
    
    
    learner_created: false
feedback_link: https://hyperskill.org/learn/step/11010#comment
status: Solved
record: 2

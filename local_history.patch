Index: Meal Planner (Kotlin)/task/src/mealplanner/Main.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Meal Planner (Kotlin)/task/src/mealplanner/Main.kt b/Meal Planner (Kotlin)/task/src/mealplanner/Main.kt
--- a/Meal Planner (Kotlin)/task/src/mealplanner/Main.kt	
+++ b/Meal Planner (Kotlin)/task/src/mealplanner/Main.kt	(date 1712672449060)
@@ -13,15 +13,6 @@
     // Функция для создания таблиц, если они не существуют
     fun createTableIfNotExists() {
         connection.createStatement().use { statement ->
-            //Очистка базы данных
-            //statement.executeUpdate("drop table if exists ingredients")
-            //statement.executeUpdate("drop table if exists meals")
-            //statement.executeUpdate("drop table if exists plan")
-            /*statement.executeUpdate("DELETE FROM meals")
-            statement.executeUpdate("DELETE FROM ingredients")
-            statement.executeUpdate("DELETE FROM plan")
-             */
-            //Создание таблиц
             val resultSet = statement.executeQuery("SELECT name FROM sqlite_master WHERE type='table' AND name='meals'")
             if (!resultSet.next()) {
                 statement.executeUpdate("CREATE TABLE meals (meal_id INTEGER PRIMARY KEY AUTOINCREMENT, category TEXT, meal TEXT)")
@@ -31,38 +22,6 @@
         }
     }
 
-    /*fun createTableIfNotExists() {
-        connection.createStatement().use { statement ->
-            val resultSet = statement.executeQuery("SELECT name FROM sqlite_master WHERE type='table' AND name='meals'")
-            if (!resultSet.next()) {
-                // Создаем таблицу meals
-                statement.executeUpdate("CREATE TABLE meals (meal_id INTEGER PRIMARY KEY AUTOINCREMENT, category TEXT, meal TEXT)")
-                // Вставляем примеры данных в таблицу meals
-                statement.executeUpdate("INSERT INTO meals (category, meal) VALUES ('breakfast', 'Scrambled Eggs')")
-                statement.executeUpdate("INSERT INTO meals (category, meal) VALUES ('lunch', 'Chicken Salad')")
-                statement.executeUpdate("INSERT INTO meals (category, meal) VALUES ('dinner', 'Spaghetti Bolognese')")
-
-                // Создаем таблицу ingredients
-                statement.executeUpdate("CREATE TABLE ingredients(ingredient TEXT, ingredient_id INTEGER PRIMARY KEY AUTOINCREMENT, meal_id INTEGER)")
-                // Вставляем примеры данных в таблицу ingredients
-                // Для каждого блюда вставляем примеры ингредиентов
-                statement.executeUpdate("INSERT INTO ingredients (ingredient, meal_id) VALUES ('eggs', 1)")
-                statement.executeUpdate("INSERT INTO ingredients (ingredient, meal_id) VALUES ('milk', 1)")
-                statement.executeUpdate("INSERT INTO ingredients (ingredient, meal_id) VALUES ('salt', 1)")
-                statement.executeUpdate("INSERT INTO ingredients (ingredient, meal_id) VALUES ('chicken breast', 2)")
-                statement.executeUpdate("INSERT INTO ingredients (ingredient, meal_id) VALUES ('lettuce', 2)")
-                statement.executeUpdate("INSERT INTO ingredients (ingredient, meal_id) VALUES ('tomato', 2)")
-                statement.executeUpdate("INSERT INTO ingredients (ingredient, meal_id) VALUES ('spaghetti', 3)")
-                statement.executeUpdate("INSERT INTO ingredients (ingredient, meal_id) VALUES ('minced meat', 3)")
-                statement.executeUpdate("INSERT INTO ingredients (ingredient, meal_id) VALUES ('tomato sauce', 3)")
-
-                // Создаем таблицу plan
-                statement.executeUpdate("CREATE TABLE plan (option TEXT, category TEXT, meal_id INTEGER)")
-            }
-        }
-    }
-    */
-
     // Функция для добавления блюда в базу данных
     fun add(connection: Connection) {
         val category = readCategory()
@@ -297,27 +256,10 @@
         return Pair(true, ingredientsList)
     }
 
-    fun save(ingredientsList: List<String> ) {
-        println("Input a filename:")
-        val filename = readLine().toString()
-        val myFile = File("$filename")
-        val ingredientOccurrences = mutableMapOf<String, Int>()
-        //повторяющиеся ингридиенты пересмотреть и подсчитать
-        for (ingredient in ingredientsList) {
-            val count = ingredientOccurrences.getOrDefault(ingredient, 0)
-            ingredientOccurrences[ingredient] = count + 1
-        }
-        ingredientOccurrences.forEach {(ingredient, count) ->
-            myFile.appendText("$ingredient x$count")
-            myFile.appendText("\n")
-        }
-        println("Saved!")
-    }
-
     // Функция для выполнения запросов пользователя
     fun ask(connection: Connection) {
         do {
-            println("What would you like to do (add, show, plan, save, exit)?")
+            println("What would you like to do (add, show, plan, exit)?")
             var operation = readln().toString().toLowerCase()
             when (operation) {
                 "add" -> {
@@ -335,13 +277,6 @@
 
                 }
 
-                "save" -> {
-                    if(isPlanSaved){
-                        save(ingredientsTable)
-                    } else {
-                        println("Unable to save. Plan your meals first.")
-                    }
-                }
                 "exit" -> {
                     println("Bye!")
                     return
